language: python
python:
  # We don't actually use the Travis Python, but this keeps it organized.
  #- "2.7"    # not tested anymore starting from 0.9.19
  - "3.8"
# os: linux

stages:
  - name: test
    if: branch = master OR branch = develop
    # we dont test on other branches
  - name: lint
    if: branch = master OR branch = develop
    # we dont lint on other branches
  - name: deploy
    if: branch = master

#, we can use references and anchors to gracefully compose our stages
_test: &_test
  stage: test
  # language: generic
  name: Test and Coverage
  install:
    # Install Anaconda
    # We do this conditionally because it saves us some downloading if the
    # version is the same.
    - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda update -q conda
    # Useful for debugging any issues with conda
    - conda info -a

    # Update python version in environment
    - sed -i -E 's/(python=)(.*)/\1'$TRAVIS_PYTHON_VERSION'/' ./environment.yml
    # Create conda environment
    - conda env create -n py36 radis-env -f environment.yml
    # Activate and install test-only dependencies
    - source activate radis-env
    - conda list
    - pip install pytest-cov
    - pip install -e . -v
  script:
    # Your test script goes here
    - echo ">>> Run tests"
    # use XVFB to have headless display port, and still run the Matplotlib tests.
    - xvfb-run pytest --cov=./
    # lookup 'addopts' in setup.cfg>[tools:pytest] for default tests

  after_success:
    # codecoverage
    - pip install codecov
    - codecov

jobs:
  include:
    - <<: *_test
      os: windows
      language: shell
      before_install:
        - choco install python --version 3.9.2
        - python --version
        - choco install runinbash
      env: PATH=/c/Python39:/c/Python39/Scripts:$PATH

    - <<: *_test
      os: linux

    - stage: lint
      os: linux
      name: Code Quality Checks
      install:
        - pip install pre-commit
      script:
        - pre-commit run --all-files

    - stage: deploy
      os: linux
      name: Deploy to PyPI
      install:
        - sudo apt-get update
      script:
        - echo "Deploying to PyPI"
      before_deploy:
        - sudo apt-get install pandoc
        - pandoc README.rst -o README.md
      deploy:
        os: linux
        provider: pypi
        user: "__token__"
        password:
          secure: dxZOpuKL1ezk3MM5FgY89zJYNL484x0jUZ+c3IB5q2GjpWl6qmCogoWG37iGZIcmldeIdVzga3pj5CC32eht4B0hJQX5QLVjCq9wwpfLs7Tkj4ODiAzvOchSLhfBOSLOIX33iW/+wxDjZ3fG61TzPI1z3ksdNh7+imdVYiV+G4FmOcxJKjFEgGm7CAwfbxso47ab9jbgm6FHbCC7HfpSiSrMpyIDSorJFk5XR11+Hoe6JjbKr11eeWuoO8EXKvSQeeJpsu0minqFyAy8nf9af/aU3NJU1LOlFM1DuoYlpQKwnbop5lBodU28zt4Asa1h8lp8Zu+wZSIaZSOeEoC6U/H/5zAE03W8SytWyWgNEtwuYLSiWacbOzeZOclVRoNu4P6Fz9hFdZuSANQlSQN7cBYFJiA8cbJDU4nb3srFoKlBLxCH9ZC3/K7rnZpjPmy7A35plNf+1dAEpB6adiWwsGy/VwCywHyJsBq7N3z6lN9wZ2SUPekl4y/sLobYPqg8y48u4bMqfd05Ub1QDUB3MSNALMa+OcczJvxNHZj+Bk4ooai/t/GOMOWNyy78VES7S/J77cWUheq+mW80ywCS8gcyF6ARR4EJxJGwp4q2RHwGdVvxbzc/uaKgi6I1bmLRw4cjJvOXx5ulLdANUftfMg4ATW/VAFqYLrdS/LpGX5A=
        skip_existing: true
        distributions: "sdist bdist_wheel"
