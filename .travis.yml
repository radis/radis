# Runs Test scripts; Linting; Deployment on Travis-CI
language: python
python:
  #- "2.7"    # not tested anymore starting from 0.9.19
  #- "3.8" #end of life, Novembre 2024, https://devguide.python.org/versions/
  - "3.10"
  - "3.11"
os: linux
dist: focal #needed for python 3.10 (xenial is default for Travis-CI, but does not support python 3.10)

name: Test and Coverage
before_install:
  # Install Micromamba
  # We do this conditionally because it saves us some downloading if the
  # version is the same.
  # For now use http instead of https according to this comment:
  # https://github.com/mamba-org/mamba/issues/1675#issuecomment-1127160021
  - wget -qO- https://micro.mamba.pm/api/micromamba/linux-64/1.5.8 | tar -xvj bin/micromamba
  - ./bin/micromamba shell init -s bash -p ~/micromamba
  - source ~/.bashrc
install:
  - micromamba activate base
  # Update python version in environment
  - sed -i -E 's/^- python$/- python='$TRAVIS_PYTHON_VERSION'/' ./environment.yml
  # Create conda environment
  - micromamba install xtensor -c conda-forge -y
  # move requirements.txt to the /tmp folder, required so that .environment.yml finds it
  - pwd
  - cp requirements.txt /tmp/requirements.txt
  # Create the environment:
  - micromamba create -f ./environment.yml -y
  # Activate and install test-only dependencies
  - micromamba activate radis-env
  - micromamba list
  - pip install pytest-cov
  - pip install -e . -v
  - pip install pytest-random-order #to avoid being rejected by the servers when downloading the same databases by tests in parallel

services:
  - xvfb

before_script:
# pipeline does not continue if anything fails
# >> If before_install, install or before_script returns a non-zero exit code, the build is errored and
# >> stops immediately. (https://docs.travis-ci.com/user/job-lifecycle/#breaking-the-build)
  - export MPLBACKEND=Agg
  - python --version #to check and be sure of the python version
  - echo ">>> Run fast tests first"
  # use XVFB to have headless display port, and still run the Matplotlib tests.
  - xvfb-run -a pytest -m "fast and not needs_db_CDSD_HITEMP_PCN and not needs_db_CDSD_HITEMP and not needs_db_CDSD_HITEMP_PC" --durations=10 --random-order

script:
  # Your test script goes here
  # >> If script returns a non-zero exit code, the build is failed, but continues to run before being
  # >> marked as failed.  (https://docs.travis-ci.com/user/job-lifecycle/#breaking-the-build)
  - echo ">>> Run long tests now"
  - xvfb-run -a pytest -m "not fast and not needs_cuda and not download_large_databases and not needs_db_CDSD_HITEMP and not needs_db_CDSD_HITEMP_PCN and not needs_db_CDSD_HITEMP_PC and not needs_db_HITEMP_CO2_DUNHAM and not needs_db_HITEMP_CO_DUNHAM" --durations=10
  # --durations=N to print the slowest N tests
  # lookup 'addopts' in setup.cfg>[tools:pytest] for default tests

after_success:
  # codecoverage
  - pip install codecov
  - codecov


stages: #This sequence defines the order of the stages
  - name: test
    if: branch = master OR branch = develop
  - name: lint
    if: branch = master OR branch = develop
  - name: deploy
    if: branch = master
  - name: Py38
    if: branch = master
  - name: Py312
    if: branch = master
  - name: MacOS_py310
    if: branch = master
  # - name: Win_py310
  #   if: branch = master OR branch = develop

jobs:
  include:
    - stage: MacOS_py310
      name: Python 3.10 on macOS
      python: "3.10"
      os: osx
      osx_image: xcode11.2
      language: shell
      before_install: #https://gist.github.com/wolfv/fe1ea521979973ab1d016d95a589dcde#os-x
          - curl -Ls https://micromamba.snakepit.net/api/micromamba/osx-64/latest | tar -xvj bin/micromamba
          - mkdir -p ~/micromamba/bin
          - mv bin/micromamba ~/micromamba/bin/
          - export PATH=$HOME/micromamba/bin:$PATH
          - MAMBA_ROOT_PREFIX=~/micromamba
          - micromamba shell init -s zsh
          - eval "$(micromamba shell hook --shell bash)"
      before_script: #same as the other but without xvfb-run
        - echo ">>> Run fast tests first"
        - pytest -m "fast and not needs_db_CDSD_HITEMP_PCN and not needs_db_CDSD_HITEMP and not needs_db_CDSD_HITEMP_PC" --durations=10
      script: skip #there is a problem with test_exomol.py, but let's skip the long tests for the moment
        # - echo ">>> Run long tests now"
        # - pytest -m "not fast and not needs_cuda and not download_large_databases and not needs_db_CDSD_HITEMP and not needs_db_CDSD_HITEMP_PCN and not needs_db_CDSD_HITEMP_PC and not needs_db_HITEMP_CO2_DUNHAM and not needs_db_HITEMP_CO_DUNHAM" --durations=10

    # - stage: Win_py310 #https://github.com/mamba-org/micromamba-releases/releases/latest/download/micromamba-win-64
    #   name: Python 3.10 on Windows
    #   python: "3.10"
    #   os: windows
    #   language: shell
    #   before_install:
    #     - choco upgrade python -y --version 3.10.0
    #     - python -m pip install --upgrade pip
    #   env: PATH=/c/Python310:/c/Python310/Scripts:$PATH
    #   install:
    #     # Install Micromamba
    #     - Invoke-WebRequest -Uri 'https://micro.mamba.pm/api/micromamba/win-64/1.5.8' -OutFile 'micromamba.tar.bz2'
    #     - Expand-Archive -Path 'micromamba.tar.bz2' -DestinationPath 'micromamba'
    #     - Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
    #     - micromamba shell init -s powershell -p ~/micromamba
    #     - micromamba activate base
    #     # Update python version in environment
    #     - (Get-Content -Path 'environment.yml') -replace '(python=)(.*)', ('$1' + $env:TRAVIS_PYTHON_VERSION) | Set-Content -Path 'environment.yml'
    #     # Create conda environment
    #     - micromamba install xtensor -c conda-forge -y
    #     # move requirements.txt to the /tmp folder, required so that .environment.yml finds it
    #     - Copy-Item -Path 'requirements.txt' -Destination 'C:\tmp\requirements.txt'
    #     # Create the environment:
    #     - micromamba create -f 'environment.yml' -y
    #     # Activate and install test-only dependencies
    #     - micromamba activate radis-env
    #     - micromamba list
    #     - pip install pytest-cov
    #     - pip install -e . -v
  ### Extra Python versions - start
    - stage: Py38
      name: "Python 3.8"
      python: 3.8
    - stage: Py312
      name: "Python 3.12"
      python: 3.12
  ### Extra Python versions - end
    - stage: lint
      name: Code Quality Checks
      python: 3.10
      install:
        - pip install pre-commit
        - pre-commit install
      before_script: skip #do NOT run the before_script of "tests" stage
      script:
        - pre-commit run --all-files
      after_failure: #better for checking the origin of a bug
        - cat /home/travis/.cache/pre-commit/pre-commit.log

    - stage: deploy
      name: Deploy to PyPI
      services:
        - xvfb
      install:
        - sudo apt-get update
        #Next is to test after deploy
        - wget -qO- https://micro.mamba.pm/api/micromamba/linux-64/1.5.8 | tar -xvj bin/micromamba
        - ./bin/micromamba shell init -s bash -p ~/micromamba
        - source ~/.bashrc
        - micromamba activate base
      before_script: skip #do NOT run the before_script of "tests" stage
      script:
        - echo "Deploying to PyPI"
      before_deploy:
        - sudo apt-get install pandoc
        - pandoc README.rst -o README.md
      deploy:
        provider: pypi
        user: "__token__"
        password:
          secure: dxZOpuKL1ezk3MM5FgY89zJYNL484x0jUZ+c3IB5q2GjpWl6qmCogoWG37iGZIcmldeIdVzga3pj5CC32eht4B0hJQX5QLVjCq9wwpfLs7Tkj4ODiAzvOchSLhfBOSLOIX33iW/+wxDjZ3fG61TzPI1z3ksdNh7+imdVYiV+G4FmOcxJKjFEgGm7CAwfbxso47ab9jbgm6FHbCC7HfpSiSrMpyIDSorJFk5XR11+Hoe6JjbKr11eeWuoO8EXKvSQeeJpsu0minqFyAy8nf9af/aU3NJU1LOlFM1DuoYlpQKwnbop5lBodU28zt4Asa1h8lp8Zu+wZSIaZSOeEoC6U/H/5zAE03W8SytWyWgNEtwuYLSiWacbOzeZOclVRoNu4P6Fz9hFdZuSANQlSQN7cBYFJiA8cbJDU4nb3srFoKlBLxCH9ZC3/K7rnZpjPmy7A35plNf+1dAEpB6adiWwsGy/VwCywHyJsBq7N3z6lN9wZ2SUPekl4y/sLobYPqg8y48u4bMqfd05Ub1QDUB3MSNALMa+OcczJvxNHZj+Bk4ooai/t/GOMOWNyy78VES7S/J77cWUheq+mW80ywCS8gcyF6ARR4EJxJGwp4q2RHwGdVvxbzc/uaKgi6I1bmLRw4cjJvOXx5ulLdANUftfMg4ATW/VAFqYLrdS/LpGX5A=
        skip_existing: true
        skip_cleanup: true    # to keep wheels (in the ./dist folder?)
        distributions: "sdist bdist_wheel"
      after_deploy:
      - VERSION_RADIS=$(cat radis/__version__.txt)
      - pip install radis==$VERSION_RADIS
      - pip install pytest
      - xvfb-run -a pytest -m "fast and not needs_cuda and not download_large_databases and not needs_db_CDSD_HITEMP and not needs_db_CDSD_HITEMP_PCN and not needs_db_CDSD_HITEMP_PC and not needs_db_HITEMP_CO2_DUNHAM and not needs_db_HITEMP_CO_DUNHAM" --durations=10

